/*
 * DHBW Engineering Stuttgart e.V.
 * All rights reserved
 * 2016
 */
package de.dhbwengineering.esleektestingdb.gui;

import com.mongodb.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import static com.mongodb.client.model.Filters.eq;
import com.mongodb.gridfs.GridFS;
import com.mongodb.gridfs.GridFSDBFile;
import de.dhbwengineering.esleektestingdb.config.Configuration;
import de.dhbwengineering.esleektestingdb.threads.UploadSFTP;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import org.bson.Document;

/**
 * Get a measurement from a database
 *
 * @author Leon
 */
public class GetMeasurements extends javax.swing.JDialog {

    /**
     * Creates new form SeeMeasurements
     */
    public GetMeasurements(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        jTextField1.setEditable(false);

        jComboBox1.removeAllItems();
        jComboBox2.removeAllItems();

        //Connect to DB
        MongoClient mongoClient = new MongoClient(Configuration.mongoDBServer, 27017);
        MongoDatabase database = mongoClient.getDatabase(Configuration.mongoDBDatabse);

        //Get Collection
        MongoCollection<Document> collection = database.getCollection("tests");

        for (Document doc : collection.find()) {
            System.out.println(doc.get("name"));
            System.out.println(doc.get("someDefault"));
            jComboBox1.addItem(String.valueOf(doc.get("name")));
        }
        mongoClient.close();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Select testing");

        jLabel2.setText("Select measurement");

        jLabel3.setText("Value");

        jButton1.setText("Download");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox2, 0, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * New measurement selected
     *
     * @param evt
     */
    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        jTextField1.setText("");

        MongoClient mongoClient = new MongoClient(Configuration.mongoDBServer, 27017);
        MongoDatabase database = mongoClient.getDatabase(Configuration.mongoDBDatabse);

        //Get Collection
        MongoCollection<Document> collection = database.getCollection(String.valueOf(jComboBox1.getSelectedItem()));

        for (Document doc : collection.find(eq("name", jComboBox2.getSelectedItem()))) {
            System.out.println(doc.get("name"));
            System.out.println(doc.get("value"));
            jTextField1.setText(String.valueOf(doc.get("value")));
        }

        mongoClient.close();

    }//GEN-LAST:event_jComboBox2ActionPerformed
    /**
     * New testing selected
     *
     * @param evt
     */
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

        jComboBox2.removeAllItems();
        MongoClient mongoClient = new MongoClient(Configuration.mongoDBServer, 27017);
        MongoDatabase database = mongoClient.getDatabase(Configuration.mongoDBDatabse);

        //Get Collection
        MongoCollection<Document> collection = database.getCollection(String.valueOf(jComboBox1.getSelectedItem()));

        for (Document doc : collection.find()) {
            System.out.println(doc.get("name"));
            System.out.println(doc.get("value"));
            jComboBox2.addItem(String.valueOf(doc.get("name")));
        }
        mongoClient.close();

    }//GEN-LAST:event_jComboBox1ActionPerformed

    /**
     * Download the selected data
     *
     * @param evt
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        JFileChooser jfs = new JFileChooser();
        jfs.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jfs.showOpenDialog(this);

        MongoClient mongoClient = new MongoClient(Configuration.mongoDBServer, 27017);
//Download File
        String newFileName = String.valueOf(jComboBox2.getSelectedItem());
//        System.out.println("Loaded from measurements " + newFileName + "_measurement");
//        GridFS gfsPhoto = new GridFS(mongoClient.getDB(Configuration.mongoDBDatabse), "measurements");
//        GridFSDBFile imageForOutput = gfsPhoto.findOne(newFileName + "_measurement");
//        try {
//            imageForOutput.writeTo("C:\\Users\\Leon\\Desktop\\whatever.dat");
//        } catch (IOException ex) {
//            Logger.getLogger(GetMeasurements.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        mongoClient.close();

        UploadSFTP uploadThread = new UploadSFTP("/home/measurements/" + String.valueOf(jComboBox1.getSelectedItem()), jfs.getSelectedFile().getAbsolutePath() + File.separator + String.valueOf(jComboBox2.getSelectedItem()) + ".dat", newFileName);
        uploadThread.start();
        try {
            uploadThread.join();
        } catch (InterruptedException ex) {
            Logger.getLogger(GetMeasurements.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GetMeasurements.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GetMeasurements.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GetMeasurements.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GetMeasurements.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GetMeasurements dialog = new GetMeasurements(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
